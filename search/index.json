[{"content":"原神各版本体积 做个记录。 之前在 知乎 回答过，没人看，搬来这里。\n里程碑： 整体突破70GB: 4.0 本体突破70GB: 4.x 4.2 游戏数据\nYuanShen_Data: 67.21 GB (+ 4.18 GB)\n语音\nzh / en / ja / ko: 11.62 / 13.41 / 15.15 / 11.38 GB (+ 550 ~ 700 MB)\n差分包\n语言 文件名 大小 / game_4.1.0_4.2.0_hdiff_muBp8rd2jUzsaOCg.zip 13.11 GiB zh zh-cn_4.1.0_4.2.0_hdiff_nh9PQk51UuE7dmqH.zip 448.74 MiB en en-us_4.1.0_4.2.0_hdiff_mIywVGEvAY9qlkzt.zip 586.78 MiB ja ja-jp_4.1.0_4.2.0_hdiff_oTbeQjA1fMXcZKzm.zip 531.08 MiB ko ko-kr_4.1.0_4.2.0_hdiff_iMCgobAXWZNP3wRy.zip 466.59 MiB 4.1 游戏数据\nYuanShen_Data: 63.03 GB (+ 6.13 GB)\n语音\nzh / en / ja / ko: 11.07 / 12.77 / 14.44 / 10.84 GB (+ 600 ~ 850 MB)\n差分包\n语言 文件名 大小 / game_4.0.1_4.1.0_hdiff_kSHavhPZp92sLMt3.zip 13.50 GiB zh zh-cn_4.0.1_4.1.0_hdiff_HNstacPevd6XZq0D.zip 523.93 MiB en en-us_4.0.1_4.1.0_hdiff_p5wjiT2WqdlEaxVR.zip 678.62 MiB ja ja-jp_4.0.1_4.1.0_hdiff_40MlZ96BrAekQjTw.zip 649.35 MiB ko ko-kr_4.0.1_4.1.0_hdiff_HY3acWFwSnD12h6L.zip 532.69 MiB 4.0 游戏数据\nYuanShen_Data: 56.90 GB (+ 7.01 GB)\n语音\nzh / en / ja / ko: 10.45 / 12.04 / 13.59 / 10.23 GB (+ 800 ~ 1000 MB)\n差分包\ngame_3.8.0_4.0.0_hdiff_hash.zip: 31.38 GB\n3.x 3.8 游戏数据\nYuanShen_Data: 49.89 GB (+ 0.84 GB)\n语音\nzh / en / ja / ko: 9.72 / 11.21 / 12.63 / 9.52 GB (+ 300 ~ 500 MB)\n差分包\ngame_3.7.0_3.8.0_hdiff_hash.zip: 10.19 GB\n3.7 游戏数据\nYuanShen_Data: 49.05 GB (+ 1.04 GB)\n语音\nzh / en / ja / ko: 9.38 / 10.79 / 12.15 / 9.18 GB (+ 400 ~ 600 MB)\n差分包\ngame_3.6.0_3.7.0_hdiff_hash.zip: 8.27 GB\n3.6 游戏数据\nYuanShen_Data: 48.01 GB (+ 2.98 GB)\n语音\nzh / en / ja / ko: 8.97 / 10.28 / 11.55 / 8.79 GB (+ 500 ~ 700 MB)\n差分包\ngame_3.5.0_3.6.0_hdiff_hash.zip: 9.80 GB\n3.5 游戏数据\nYuanShen_Data: 45.03 GB\n语音\nzh / en / ja / ko: 8.44 / 9.64 / 10.84 / 8.25 GB\n","date":"2023-11-06T16:00:00+08:00","image":"https://blog.kmtea.eu/p/231106-genshin-size/img/cover_hudae929d862a6b1f27714c9b94b7bd55d_165280_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/231106-genshin-size/","title":"原神各版本体积"},{"content":"SaaS 平台 Python 应用部署实战 如果你还不知道， 现在各大云服务巨头都提供了 永久免费 的 Serverless 服务， 适合托管一些很小的应用。\n想把去年写的一个 Telegram 超轻量 bot 部署到 Azure Functions 上， 结果被微软念经一样的文档气得不轻， 遂决定写一篇 walkthrough 记录下。\n本教程所使用的代码放在 KumaTea/KumaLiteBot 这个 repo 里。\n目前示例 bot Kuma 发癫 Bot 托管在 Azure 上面。\nGoogle Cloud Functions 谷歌的配置过程是最直观、方便、省心的， 其实这个bot之前就托管在谷歌云上， 但是因为有隐性收费就关掉了。 只能说贵有贵的道理。\n创建 Functions 先进入 Functions 界面\n点蓝色的创建\n基础信息，喜欢的名字就好\nRegion 这里，一般根据最多人访问的地区来选\n因为我是 Telegram Bot, 选择 API 所在地荷兰阿姆斯特丹\nTrigger 这里 Auth 选择允许未认证调用\n你也不想每次打开都要输密码吧\n下面配置按需求选， 我的 bot 用不到默认的 256 MB 就选了最小的\n环境变量记得 在 SECURITY AND IMAGE REPO 设置\n如果弹出启用 API 允许即可\n录入代码 选择语言和版本\n右边编辑器可以粘贴自己的代码了。\n注意， Entry point 这里要写的是你程序的入口， 一般是 main\n主函数示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @functions_framework.http def main(request): res = \u0026#39;\u0026#39; try: if not request.method == \u0026#34;POST\u0026#34;: return \u0026#39;I am working!\u0026#39; update = Update.de_json(request.get_json(force=True), bot) if update.inline_query: res = inline(request) elif update.message: msg = update.message if msg.chat.id \u0026gt; 0: res = msg.reply_text(nonsense_reply()) else: logger.info(\u0026#39;Unknown type. Ignoring...\u0026#39;) except Exception as e: logger.debug(str(request.get_json(force=True))) logger.error(str(e)) return res if type(res) is str else \u0026#39;\u0026#39; request 就是一个标准的 flask.request 对象， 非常友好，与楼下高下立判\n然后点击左侧 requirements.txt\n把依赖贴进去，就可以点下面的 Deploy 了\n其他设置 可以看到这里我失败了，因为忘了设置环境变量\n我需要的变量是认证的 BOT_TOKEN, 安全地 设置这个变量会很麻烦，介绍如下\n点击上方 Edit\n进入 SECURITY AND IMAGE REPO\n点击 ADD A SECRET REFERENCE\n这个时候会发现创建是灰的\n就需要先启用这个什么 Secret API\n点击左边 ENTER SECRET MANUALLY 就会弹出带你去的窗口\n启用后回来刷新重新进入修改，就能看到可以创建了，右边会弹出窗口\nName 随便写，下面的 value 填你的 token\n然后 CREATE SECRET\nReference method 选中暴露为环境变量\n下面环境变量输入你需要的，比如 BOT_TOKEN\n至于上面提示没有权限，实测没有影响\n这是安全的方法，那么有没有不安全的呢？\n当然有\n首先 Cloud Functions v1 就没有这么多幺蛾子\n只要在创建或者修改里面 RUNTIME 下面 environment variables 里面填就好了\n当然你也可以直接写进代码里\n完成 OK, 这就完了\nGCP 会自动开始 build 并部署\n可以看见已经成功运行\n小提示 Cloud Functions 有免费额度， 但 Storage 没有。\n部署完成后可以直接删掉自动生成的 buckets 避免扣钱， 完全不影响 bot 运行\nAWS Lambda AWS Lambda 比 GCP Cloud Functions 多一步手动上传依赖的步骤\n创建 Lambda 在开始之前，记得先在右上角选择你想要的地区\nAWS 和别人不一样，它是先选地区，在这里创建的所有资源都会在这个区域\n右上角黄色按钮创建\n名字，语言和版本，架构\n下方高级设置，要勾上 Enable Function URL, 这样才能从 URL 访问；\nAuth type 选 None\n填入代码 向下拉，把代码粘贴进编辑器，保存即可\n主函数示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def lambda_handler(event, context): res = { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;\u0026#39; } method = event[\u0026#39;requestContext\u0026#39;][\u0026#39;http\u0026#39;][\u0026#39;method\u0026#39;] try: if not method == \u0026#34;POST\u0026#34;: res[\u0026#39;body\u0026#39;] = \u0026#39;I am working!\u0026#39; return res update = Update.de_json(json.loads(event[\u0026#39;body\u0026#39;]), bot) if update.inline_query: res[\u0026#39;body\u0026#39;] = str(inline(update)) elif update.message: msg = update.message if msg.chat.id \u0026gt; 0: res[\u0026#39;body\u0026#39;] = str(msg.reply_text(nonsense_reply())) else: logger.info(\u0026#39;Unknown type. Ignoring...\u0026#39;) except Exception as e: logger.error(str(event)) logger.error(str(e)) return res event 示例\nGET: {'version': '2.0', 'routeKey': '$default', 'rawPath': '/', 'rawQueryString': 'key=value', 'headers': {'sec-fetch-mode': 'navigate', 'x-amzn-tls-version': 'TLSv1.2', 'sec-fetch-site': 'none', 'accept-language': 'en-US,en;q=0.9', 'x-forwarded-proto': 'https', 'x-forwarded-port': '443', 'x-forwarded-for': '103.172.80.149', 'sec-fetch-user': '?1', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'x-amzn-tls-cipher-suite': 'ECDHE-RSA-AES128-GCM-SHA256', 'sec-ch-ua': '\u0026quot;Google Chrome\u0026quot;;v=\u0026quot;117\u0026quot;, \u0026quot;Not;A=Brand\u0026quot;;v=\u0026quot;8\u0026quot;, \u0026quot;Chromium\u0026quot;;v=\u0026quot;117\u0026quot;', 'sec-ch-ua-mobile': '?0', 'x-amzn-trace-id': 'Root=1-65284b56-7a462eea204cb5a45d3c0668', 'sec-ch-ua-platform': '\u0026quot;Windows\u0026quot;', 'host': '7o22cfijy5jiujzbih6aov5yvy0hasni.lambda-url.eu-central-1.on.aws', 'upgrade-insecure-requests': '1', 'accept-encoding': 'gzip, deflate, br', 'sec-fetch-dest': 'document', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'}, 'queryStringParameters': {'key': 'value'}, 'requestContext': {'accountId': 'anonymous', 'apiId': '7o22cfijy5jiujzbih6aov5yvy0hasni', 'domainName': '7o22cfijy5jiujzbih6aov5yvy0hasni.lambda-url.eu-central-1.on.aws', 'domainPrefix': '7o22cfijy5jiujzbih6aov5yvy0hasni', 'http': {'method': 'GET', 'path': '/', 'protocol': 'HTTP/1.1', 'sourceIp': '103.172.80.149', 'userAgent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'}, 'requestId': '90551f3b-4891-4b37-9aeb-71e2fae50ad1', 'routeKey': '$default', 'stage': '$default', 'time': '12/Oct/2023:19:39:02 +0000', 'timeEpoch': 1697139542555}, 'isBase64Encoded': False}\nPOST: {'version': '2.0', 'routeKey': '$default', 'rawPath': '/', 'rawQueryString': '', 'headers': {'content-length': '372', 'x-amzn-tls-cipher-suite': 'ECDHE-RSA-AES128-GCM-SHA256', 'x-amzn-tls-version': 'TLSv1.2', 'x-amzn-trace-id': 'Root=1-65284b9f-3fff13e27bc794f95e3dbc98', 'x-forwarded-proto': 'https', 'host': '7o22cfijy5jiujzbih6aov5yvy0hasni.lambda-url.eu-central-1.on.aws', 'x-forwarded-port': '443', 'content-type': 'application/json', 'x-forwarded-for': '91.108.6.19', 'accept-encoding': 'gzip, deflate'}, 'requestContext': {'accountId': 'anonymous', 'apiId': '7o22cfijy5jiujzbih6aov5yvy0hasni', 'domainName': '7o22cfijy5jiujzbih6aov5yvy0hasni.lambda-url.eu-central-1.on.aws', 'domainPrefix': '7o22cfijy5jiujzbih6aov5yvy0hasni', 'http': {'method': 'POST', 'path': '/', 'protocol': 'HTTP/1.1', 'sourceIp': '91.108.6.19', 'userAgent': None}, 'requestId': '9fc841ed-6d28-461e-a657-565813752326', 'routeKey': '$default', 'stage': '$default', 'time': '12/Oct/2023:19:40:15 +0000', 'timeEpoch': 1697139615123}, 'body': '{\u0026quot;update_id\u0026quot;:11992905,\\n\u0026quot;message\u0026quot;:{\u0026quot;message_id\u0026quot;:20,\u0026quot;from\u0026quot;:{\u0026quot;id\u0026quot;:5273618487,\u0026quot;is_bot\u0026quot;:false,\u0026quot;first_name\u0026quot;:\u0026quot;Kuma\u0026quot;,\u0026quot;last_name\u0026quot;:\u0026quot;Tea\u0026quot;,\u0026quot;username\u0026quot;:\u0026quot;realKumaTea\u0026quot;,\u0026quot;language_code\u0026quot;:\u0026quot;en\u0026quot;},\u0026quot;chat\u0026quot;:{\u0026quot;id\u0026quot;:5273618487,\u0026quot;first_name\u0026quot;:\u0026quot;Kuma\u0026quot;,\u0026quot;last_name\u0026quot;:\u0026quot;Tea\u0026quot;,\u0026quot;username\u0026quot;:\u0026quot;realKumaTea\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;private\u0026quot;},\u0026quot;date\u0026quot;:1697139614,\u0026quot;text\u0026quot;:\u0026quot;/start\u0026quot;,\u0026quot;entities\u0026quot;:[{\u0026quot;offset\u0026quot;:0,\u0026quot;length\u0026quot;:6,\u0026quot;type\u0026quot;:\u0026quot;bot_command\u0026quot;}]}}', 'isBase64Encoded': False}\nLambda 回传的 response['body'] 必须是 str 类型， 否则会报 [ERROR] Runtime.MarshalError: Unable to marshal response\n上传依赖 这个时候如果直接部署会报错：找不到依赖\nAWS Lambda 奇葩的设计导致我们不能上传 requirements.txt 让它自己安装， 必须自己手动下载依赖并上传。\n首先需要找一台 Linux 机器，运行 docker\n1 docker run -it --rm --name test python:3.11-slim /bin/bash 然后安装所需依赖\n1 2 3 4 5 6 apt update -qq \u0026amp;\u0026amp; apt install zip -y -qq cd /tmp mkdir python pip install \u0026#34;python-telegram-bot\u0026lt;20\u0026#34; -t python -q zip -r python.zip python 再把生成的 python.zip 复制出来\n记得新开个 shell 别傻乎乎把 docker 退了\n1 docker cp test:/tmp/python.zip . Docker 容器这个时候可以关了\n继续下拉，在 Layers 这里点击 Add a layer\n点 AWS layers 上面那行小字 create a new layer\n随便写，上传，提交\n重新回到 Lambda dashboard，拉到下面， 点开熟悉的 Add a layer， 选择 Custom layers，选刚刚创建的，右下角 Add\n最后点 Code Source 旁边的 Deploy\n其他设置 环境变量在下方 Configuration - Environment variables 里面， 设置简单不再赘述。\n完成 已成功运行\nAzure Functions Azure 更是重量级，Web 端功能复杂甚至缺失， 必须使用 VS Code 才能完整部署\n准备 你需要安装一个 VS Code\n然后安装 Azure Functions 插件\n安装好之后，会在左边栏看到一个 A 图标\n点击并登录，直到看到你使用的产品都列出了\n创建 Functions 左下角 Workspace，鼠标移上去会有一个 Functions 图标出现\n点击第二个 Create New Project\n回到上方，选择一个空文件夹\n语言根据需要选，模型默认 V2, Python 环境可以选择有的也可以跳过\nTemplate 选择 HTTP Trigger\nTrigger 名称是你的 API 路径，这里我改成了 bot\n然后认证选择 Anonymous\n就可以打开生成的代码文件编辑了\n填入代码 首先这个 Create New Function 是没有用的\n它不过是在你的代码里加一个入口，可以自己写\n把代码贴进去就好了，不赘叙\n主函数示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @app.route(route=\u0026#34;bot\u0026#34;, auth_level=func.AuthLevel.ANONYMOUS) def main(req): res = \u0026#39;\u0026#39; try: if not req.method == \u0026#34;POST\u0026#34;: return \u0026#39;I am working!\u0026#39; update = Update.de_json(req.get_json(), bot) if update.inline_query: res = inline(update) elif update.message: msg = update.message if msg.chat.id \u0026gt; 0: res = msg.reply_text(nonsense_reply()) else: logger.info(\u0026#39;Unknown type. Ignoring...\u0026#39;) except Exception as e: logger.debug(str(req.get_json())) logger.error(str(e)) return res if type(res) is str else \u0026#39;\u0026#39; 这里要特别注意的是， 入口参数 必须是 req， 如果不一致，部署后会找不到 HTTP Trigger!!!\n微软没有任何文档提到这一点！我是怎么发现的呢？\n原先一直用的是 request 当入口， 因为一直部署失败，乱翻文档，在 HTTP Trigger 看到这么一句\ntrigger_arg_name\tArgument name for HttpRequest, defaults to \u0026lsquo;req\u0026rsquo;.\n没事限制参数干嘛？我就改成 req 居然就成功了\n部署和设置 工作区 Azure 图标 - Create Function App in Azure\n会需要你填写一个唯一的不重复的名字，因为这个到时候会写到 API 的 URL 里面\n我这里用的是 kmlt\n然后选择环境和地区，完成和等待创建即可\n随后上方可见刚刚创建的 Function App\n创建好，部署之前， 如果你有环境变量需要设置， 点开 Azure - Resources - Function App - kmlt, 在 Application Settings 上右键， 在弹出窗口中分别填入环境变量的名字和值\n完成后，点击 Functions 图标，选择 Deploy to Function App\u0026hellip;\n上方选择刚创建的， 弹出警告点 Deploy\n右下角会开始输出部署 log\n完成 完成后 log 会显示你的 Trigger URL\n可以打开 URL 测试\n总结 平心而论， Azure 的部署过程其实是很方便的， 尤其是对于那些用惯了 VS Code 的人来说。\n然而由于微软的文档过于语焉不详才让我吃了那么多苦头， 甚至没有这件事就没有这篇发奋而作的 blog， 笑死。\n","date":"2023-10-13T16:00:00+08:00","image":"https://blog.kmtea.eu/p/231013-saas/img/cover_huebbfad1edfa8e198fe68a27ac6a615ca_46560_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/231013-saas/","title":"SaaS 平台 Python 应用部署实战"},{"content":"诺基亚贝尔光猫宽带密码破解提取 前言 本教程适用于诺基亚贝尔光猫，型号 HGW 或 G-140W-**\n此型号的光猫不可开启 telnet:\nhttp://192.168.1.1/getpage.gch?pid=1002\u0026amp;nextpage=tele_sec_tserver_t.gch http://192.168.1.1/cgi-bin/telnetenable.cgi?telnetenable=1 以上地址均无效。\nF12 大法无效：\n密码 文本框一经选中内容就会消失；\n使用 F12 审查元素，会发现该处明文为 !!!@@@ ，不是合法的宽带拨号密码。\n教程 1. 登录 1 2 username: CMCCAdmin password: aDm8H%MdA 2. 打开如下地址 http://192.168.1.1/dumpdatamodel.cgi\n搜索宽带账号 (如 139.gd) 在下方找到密码字段。\n3. 提取密码 Ref: thedroidgeek / nokia-router-cfg-tool.py\n首先安装依赖\n1 conda install pycryptodome || pip install pycryptodome 随后运行：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import base64 class RouterCrypto: def __init__(self): from Crypto.Cipher import AES # key and IV for AES key = \u0026#39;3D A3 73 D7 DC 82 2E 2A 47 0D EC 37 89 6E 80 D7 2C 49 B3 16 29 DD C9 97 35 4B 84 03 91 77 9E A4\u0026#39; iv = \u0026#39;D0 E6 DC CD A7 4A 00 DF 76 0F C0 85 11 CB 05 EA\u0026#39; # create AES-128-CBC cipher self.cipher = AES.new(bytes(bytearray.fromhex(key)), AES.MODE_CBC, bytes(bytearray.fromhex(iv))) def decrypt(self, data): output = self.cipher.decrypt(data) # remove PKCS#7 padding return output[:-ord(output[-1:])] encrypted = input(\u0026#39;请输入密码字串：\u0026#39;) print(\u0026#39;解密密码为：\u0026#39;, RouterCrypto().decrypt(base64.b64decode(encrypted)).decode(\u0026#39;UTF-8\u0026#39;)) 运行上述代码，即可解密密码 (一般为6位数字)。\n","date":"2023-07-18T21:00:00+08:00","image":"https://blog.kmtea.eu/p/230718-modem-decrypt/img/cover_hu9e2107f7c46e82182743b850ca0770b6_37874_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/230718-modem-decrypt/","title":"诺基亚贝尔光猫宽带密码破解提取"},{"content":"Apple Pay 绑卡失败原因速查 先上目前绑卡截图镇楼\n常见错误 你的发卡机构尚不支持此卡片 Your issuer does not yet offer support for this card\n正在绑定的是中国大陆发行的非银联卡 卡的设备限制 Card device limit\n如果确认已解绑多余设备， 可尝试等待3天 卡信息无效 Invalid card\n该卡号今日 已失败5次 ，明日再试 未添加此卡 Could not add card\nCard not added\n原因不明，建议跟客服对线 关于中行疑难杂症，请见下文 客服聊天记录 建议：先找银联问错误代码，再找对应银行；\n银联首选云闪付线上客服，银行首选电话客服。\n银联 碰到绑不上的问题可以先向银联咨询错误代码\n中国银行 中行电话客服才有足够权限，在线客服只能问到通用信息\n每人无论单个或多个设备，最多存在 3张 已绑定的中行借记卡 (即包含 同一张卡绑定3台设备的情况) 有评论 称，中行最多绑定两张卡。 我自己的情况正是这样 所有银行卡合计超出上限 (新版 iOS 据说移除了 这个上限) 参考资料 中国银行绑定 Apple Pay 失败的解决方法 我与该博主相似的地方有：\n第一次绑卡时收到了银联的风控电话 绑卡失败代码都是 93608 钱包解绑银行卡后无法再重新绑定，提示设备限制 ","date":"2023-06-17T15:00:00+08:00","image":"https://blog.kmtea.eu/p/230617-apple-pay/img/err-invalid_huf3c10c93b5b3d869ba6a8349297c4b96_19310_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/230617-apple-pay/","title":"Apple Pay 绑卡失败原因速查"},{"content":"办卡列表 年份代表办卡时间而非卡片推出时间 为了防止阅读疲劳把XX卡的卡字省略掉了 图片下方的数字是 Tweet ID 汇总 该表格为现有在用卡统计，非办卡统计； 包含未提及卡，不包含已销户卡。\n银联 VISA MC AE 中行 储3 储1 工行 储2 信1 信1 建行 储2 信1 招行 储1 兴业 储1 广发 储1 浦发 储1 中信 储1 2020 招商银行 - Young 第一张学生信用卡\n卡组织：银联 分类：信用卡 等级：普卡 途径：网申 现状：销卡 2021 招商银行 - 明日方舟 我超，舟！\n介绍页\n卡组织：银联 分类：借记卡 等级：普卡 途径：线下 现状：主卡 2022 中国银行 - 洛天依 我去，洛天依！\n介绍页\n卡组织：银联 分类：借记卡 等级：普卡 途径：网申 现状：在用 中国工商银行 - 故宫 当时需要一张工行卡收补贴，觉得这张好看就办了\n介绍页\n卡组织：银联 分类：借记卡 等级：普卡 途径：线下 现状：销卡 中国银行 - 莫奈 年轻人的第一张世界卡\n介绍页\n卡组织：Mastercard 分类：借记卡 等级：World 途径：网申 现状：在用 中国工商银行 - 如意凤凰 之前自己办的那张卡学校不让用\n介绍页\n卡组织：银联 分类：借记卡 等级：普卡 途径：统一办理 现状：在用 中国银行 - 低碳 数字人民币实体卡\n介绍页\n卡组织：不适用 分类：借记卡 等级：不适用 途径：网申 现状：在用 2023 兴业银行 - 运通 第一张运通卡\n介绍页\n卡组织：American Express 分类：借记卡 等级：普卡 途径：网申 现状：在用 广发银行 - 运通 Lucky 第二张……\n介绍页\n卡组织：American Express 分类：借记卡 等级：普卡 途径：网申 现状：在用 浦发银行 - 30周年 办卡理由：好看\n卡组织：银联 分类：借记卡 等级：金卡 途径：网申 现状：在用 中国工商银行 - 星座 大学生信用卡\n卡组织：银联 + VISA 分类：信用卡 等级：普卡 途径：网申 现状：在用 中国银行 - 冰雪 全世界门槛最低的银联白金卡\n介绍页\n卡组织：银联 分类：借记卡 等级：白金卡 途径：线下 现状：在用 中国建设银行 - Line Friends 同样是大学生信用卡。毕业那年再申。\n介绍页\n卡组织：银联 分类：信用卡 等级：金卡 途径：网申 现状：在用 中信银行 - 运通 金卡借记卡\n介绍页\n卡组织：American Express 分类：借记卡 等级：金卡 途径：网申 现状：在用 ","date":"2023-06-03T15:00:00+08:00","image":"https://blog.kmtea.eu/p/230603-bank-cards/img/cover_hudaa8d3df09cc17cfa71358771f9d13ee_235068_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/230603-bank-cards/","title":"办卡列表"},{"content":"PVE 更新 OpenWrt 准备工作 OpenWrt 固件 建议编译时 不要 选中 gzip 压缩，否则容易出现各种奇妙的问题 一般情况下不选用名称带有 rootfs 的固件 USB 网卡 (可选) 如果你和我一样把全部网口都直通了，则需要在更新时使用其他的方式连接到 PVE PVE 默认不会自动启用新插入的网卡，你可能需要 ifup enx00xxxxxxxxxx \u0026amp;\u0026amp; ip link set dev enx00xxxxxxxxxx up 其中网卡名 enx00xxxxxxxxxx 可以在 ifconfig 查询 为什么不能用正常方式升级？ 众所周知，OpenWrt 正常升级方式是在 系统 - 备份升级 中升级：\n但你会发现 x86 固件是不包含 sysupgrade 固件的：\n所以，对于运行在 Proxmox VE 中的 OpenWrt 虚拟机，我们只能通过手动方式升级\n在开始之前，请确保你划分了一块虚拟硬盘作为 overlay 分区放置配置。\n如果没有，我强烈建议你花十分钟搜下教程 (关键词 extroot overlay) 完成这件事， 功在当代利在千秋\n上传新固件 上传到 local - ISO\n推荐检查 sha256sum\n更换系统固件 在以非目标 OpenWrt 内网的方式连接 PVE 的情况下，关闭虚拟机 可以用 PVE 的 Shutdown 按钮，也可以在 Console 输入 poweroff 选中系统盘 点击 Detach 并确认 再在下方找到 Unused Disk 0 并 Remove 删除 导入新固件 来到 PVE 的 Console 输入： qm importdisk 101 /var/lib/vz/template/iso/openwrt-x86-64-generic-squashfs-combined-efi.img local-lvm 其中 101 是你的 OpenWrt 虚拟机 ID 随后一个新的 Unused Disk 0 出现了 启用新系统盘 选中新的 Unused Disk 0 并点击 Edit，确认即可 启动虚拟机 恢复配置 按一下回车激活 Console 此时，原先的 overlay 会被自动挂载为 /mnt/sda1 (有时是 sdb1) 我们可以发现，该目录下 etc 内含有一 .extroot-uuid 文件。 这一文件会误导系统读取正确的 UUID 并导致无法挂载！ 使用 rm -rf /mnt/sda1/etc 将之删除。 /etc/fstab 也是没用的： rm -f /etc/fstab 查看自动生成的 /etc/config/fstab 去掉用不到的 boot 挂载 把 sda1 的 UUID 移动到 overlay 配置下 保存后重启 把修改的 /etc/config/fstab 同步到配置分区 cp -a /etc/config/fstab /mnt/sda1/upper/etc/config/ 完成 重启 检查 df -h，可发现配置分区已成功挂载！ References 我被万恶的 .extroot-uuid 困扰了几个月之久，直到看到了 这篇帖子\n因此写这篇教程广而告之。\n","date":"2022-12-27T17:00:00+08:00","image":"https://blog.kmtea.eu/p/221227-pve-openwrt/img/cover_huac6fe951059aa453777e1cd724557934_72093_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/221227-pve-openwrt/","title":"PVE 更新 OpenWrt 教程"},{"content":"Add glibc to OpenWrt 中文版\nI\u0026rsquo;m trying to replace traceroute with a tool called BestTrace, but an error was raised during execution:\nFailed to execute process \u0026lsquo;./besttrace\u0026rsquo;. Reason:\nThe file \u0026lsquo;./besttrace\u0026rsquo; does not exist or could not be executed.\nCheck the executable with file:\nbesttrace: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, Go BuildID=1c1dnBC1TKT-wnm6J_Ek/Csaj2Jrm0niZmmJ8paMZ/_hoguDO-XKYO0IWEnHWa/H2kGhpM-teit7NepUJE5, not stripped\nNoticed that, interpreter /lib64/ld-linux-x86-64.so.2, which means the arch x86-64 is correct, but glibc runtime is missing.\nSince 2015, for consideration of the space and speed of embedded devices, OpenWrt has swutched to musl from uClibc as C library.\nWhereas nowadays most software are using glibc, which cannot be run on OpenWrt.\nSolution Just copy ld-linux-x86-64.so.2 here!\nDocker If Docker is installed:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env bash set -ex # working directory # change to /opt, /usr/share or something else if you like WK_DIR=\u0026#34;/root/data\u0026#34; mkdir -p $WK_DIR cd $WK_DIR # pull Ubuntu docker pull ubuntu:jammy # start a container docker run -itd --name glibc ubuntu:jammy # copy libs docker cp -a glibc:/lib/x86_64-linux-gnu . # link ln -s \u0026#34;$WK_DIR/x86_64-linux-gnu\u0026#34; /lib/x86_64-linux-gnu || echo \u0026#34;Link already exists.\u0026#34; ln -s \u0026#34;$WK_DIR/x86_64-linux-gnu/ld-linux-x86-64.so.2\u0026#34; /lib/ld-linux-x86-64.so.2 || echo \u0026#34;Link already exists.\u0026#34; # cleanup docker stop glibc docker rm glibc docker rmi ubuntu:jammy This means you can always get the latest libs, and switch to other distros you like.\nDirectly Note: glibc v2.35, packed on 2022-10-03, could be outdated.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env bash set -ex # working directory # change to /opt, /usr/share or something else if you like WK_DIR=\u0026#34;/root/data\u0026#34; mkdir -p $WK_DIR cd $WK_DIR # download wget \u0026#34;https://github.com/KumaTea/blog/releases/download/221003/glibc.tar.gz\u0026#34; # decompress tar -xzf glibc.tar.gz # link ln -s \u0026#34;$WK_DIR/x86_64-linux-gnu\u0026#34; /lib/x86_64-linux-gnu || echo \u0026#34;Link already exists.\u0026#34; ln -s \u0026#34;$WK_DIR/x86_64-linux-gnu/ld-linux-x86-64.so.2\u0026#34; /lib/ld-linux-x86-64.so.2 || echo \u0026#34;Link already exists.\u0026#34; # cleanup rm -f glibc.tar.gz After these instructions the program can be run successfully.\n","date":"2022-10-03T16:30:00+08:00","image":"https://blog.kmtea.eu/p/221003-glibc-openwrt/img/cover.jpg","permalink":"https://blog.kmtea.eu/p/221003-glibc-openwrt-en/","title":"Add glibc to OpenWrt"},{"content":"向 OpenWrt 添加 glibc English version\n今天试图在 OpenWrt 软路由上使用 BestTrace 替换 traceroute， 但下载完成后运行却出现了错误：\nFailed to execute process \u0026lsquo;./besttrace\u0026rsquo;. Reason:\nThe file \u0026lsquo;./besttrace\u0026rsquo; does not exist or could not be executed.\n使用 file 检查文件：\nbesttrace: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, Go BuildID=1c1dnBC1TKT-wnm6J_Ek/Csaj2Jrm0niZmmJ8paMZ/_hoguDO-XKYO0IWEnHWa/H2kGhpM-teit7NepUJE5, not stripped\n注意到 interpreter /lib64/ld-linux-x86-64.so.2， 说明架构 x86-64 无误，但缺少了 glibc 运行库。\n自 2015 以后，为了嵌入式设备的体积及运行速度考虑 ， OpenWrt 使用 musl 作为 C 运行库。\n然而现在大部分软件都使用 glibc，在 OpenWrt 上就不能运行了。\n解决方案 只要把 ld-linux-x86-64.so.2 复制进来就好了！\nDocker 如果安装了 Docker 可以使用如下脚本：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env bash set -ex # working directory # change to /opt, /usr/share or something else if you like WK_DIR=\u0026#34;/root/data\u0026#34; mkdir -p $WK_DIR cd $WK_DIR # pull Ubuntu docker pull ubuntu:jammy # start a container docker run -itd --name glibc ubuntu:jammy # copy libs docker cp -a glibc:/lib/x86_64-linux-gnu . # link ln -s \u0026#34;$WK_DIR/x86_64-linux-gnu\u0026#34; /lib/x86_64-linux-gnu || echo \u0026#34;Link already exists.\u0026#34; ln -s \u0026#34;$WK_DIR/x86_64-linux-gnu/ld-linux-x86-64.so.2\u0026#34; /lib/ld-linux-x86-64.so.2 || echo \u0026#34;Link already exists.\u0026#34; # cleanup docker stop glibc docker rm glibc docker rmi ubuntu:jammy 你也可以换用 Debian 或者任意你喜欢的发行版\n直装 注：于 2022-10-03 打包的 glibc v2.35，可能过时\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env bash set -ex # working directory # change to /opt, /usr/share or something else if you like WK_DIR=\u0026#34;/root/data\u0026#34; mkdir -p $WK_DIR cd $WK_DIR # download wget \u0026#34;https://github.com/KumaTea/blog/releases/download/221003/glibc.tar.gz\u0026#34; # decompress tar -xzf glibc.tar.gz # link ln -s \u0026#34;$WK_DIR/x86_64-linux-gnu\u0026#34; /lib/x86_64-linux-gnu || echo \u0026#34;Link already exists.\u0026#34; ln -s \u0026#34;$WK_DIR/x86_64-linux-gnu/ld-linux-x86-64.so.2\u0026#34; /lib/ld-linux-x86-64.so.2 || echo \u0026#34;Link already exists.\u0026#34; # cleanup rm -f glibc.tar.gz 操作完成后程序已可成功运行。\n","date":"2022-10-03T15:00:00+08:00","image":"https://blog.kmtea.eu/p/221003-glibc-openwrt/img/cover_hua262ebb740f18203d1cd8fd284b67238_27891_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/221003-glibc-openwrt/","title":"向 OpenWrt 添加 glibc"},{"content":"树莓派安装 RHEL This tutorial is originally written in English here\n这个想法怎么来的 大概是 鲨了 CentOS 的良心不安， Red Hat 去年宣布 RHEL 个人订阅白送了 。 也就是现在家用红帽 Linux 不要钱了！\n我囸，有 RHEL 用，谁还玩 CentOS?\n但是我没机器来玩 (P.S. 写的时候有了嘿嘿)， 手头就剩下一块树莓派 4B 🥺\n于是开始搜索教程，但 Bing 直接给我当头一棒：\n本来准备放弃了， 结果意外发现， Oracle Linux ， 一个红帽Linux的衍生版本， (对，就那个拒了我100多次注册云服务的万恶的 Oracle) 有发布 适用于树莓派 4B、400和3B/+ 的固件 耶！\n搜了下，大概是唯一支持树莓派的 RHEL 发行版了。\n花了几天摸索出一个奇技淫巧，玩一波偷梁换柱， 达到在树莓派上安装 RHEL 的方法，简述一下。\n需求 Raspberry Pi 4B, 400或3B/+ 仅在4B上测试成功 一个系统盘 强烈建议使用硬盘盒转接 SSD!!! Red Hat 个人订阅 科学或者魔法上网 注册 Red Hat 个人订阅 来这里 注册 Red Hat Individual Subscription 。\n注册完了记得看下 你的管理页面 有没有东西：\n等下要从 RHEL 的 repo 中更新软件包，所以这步不能省。\n安装 Oracle Linux 首先 下载 Oracle Linux 。\n然后找个你喜欢的刷写工具。 一般 Raspberry Pi Imager 就好了，但我更喜欢 Etcher 。\n下载的图像压缩成 xz 格式了，但不用解压，直接开刷！\nSSD 与 SD卡 Oracle Linux 的根文件系统 (rootfs) 是 btrfs ， 卡得出奇，卡的批爆！合起来写炸了我5个内存卡和U盘！就为了这篇！ 所以别用内存卡！用固态！！！\n或者可以考虑下换成 f2fs 。\n然后接上树莓派，插电，开机！\n进入路由的 DHCP 客户端页面，找到 IP 地址，刚出来那个。\nssh 连上，用户名 root ，密码 oracle 。\n系统准备 ###扩展分区\n解压缩后的固件大小约为 3.89GB ，装完了剩下大约300MB。 这点地方塞牙缝 (dnf update) 都不够，先要用 parted 扩展分区。\n没自带，先安装：\n1 dnf install -y parted 不用先dnf update\n然后开搞：\n1 2 3 4 5 6 parted /dev/sda # print # resizepart 3 # q btrfs filesystem resize max / 更新 kernel-uek 要留的唯一一个软件包是 kernel-uek 。 全称 Unbreakable Enterprise Kernel ， 是 Oracle 搞的 Linux 内核。\n为什么留，因为只有 Oracle Linux 支持树莓派，当然只有它的内核能用。\n1 dnf update -y kernel-uek 补丁和运行 \u0026ldquo;convert2rhel\u0026rdquo;。 开始偷梁换柱之前先看看 os-release 怀念一下：\n1 cat /etc/os-release ###安装convert2rhel。\n参照 换到 Red Hat 吧 ， 第一步是添加证书和仓库。\n1 2 3 4 5 # ref: https://www.redhat.com/en/blog/introduction-convert2rhel-now-officially-supported-convert-rhel-systems-rhel curl -o /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release https://www.redhat.com/security/data/fd431d51.txt curl --create-dirs -o /etc/rhsm/ca/redhat-uep.pem https://ftp.redhat.com/redhat/convert2rhel/redhat-uep.pem curl -o /etc/yum.repos.d/convert2rhel.repo https://ftp.redhat.com/redhat/convert2rhel/8/convert2rhel.repo 然后安装 convert2rhel ：\n1 dnf install -y convert2rhel 修改配置 由于 RHEL 没有正式支持树莓派，它的转换工具也不会包含我们要用的配置。 硬转就会。。。\n但是可以偷懒，只要改下 x86_64 的配置就行。\n1 2 3 4 5 cp /usr/share/convert2rhel/configs/oracle-8-x86_64.cfg /usr/share/convert2rhel/configs/oracle-8-aarch64.cfg sed -i \u0026#39;s/rhel-8-for-x86_64/rhel-8-for-aarch64/g\u0026#39; /usr/share/convert2rhel/configs/oracle-8-aarch64.cfg # sed -i \u0026#39;s/-rpms/-beta-rpms/g\u0026#39; /usr/share/convert2rhel/configs/oracle-8-aarch64.cfg # sed -i \u0026#34;s/checks.perform_pre_checks()/loggerinst.task(\u0026#39;SKIP CHECKS\u0026#39;) # checks.perform_pre_checks()/g\u0026#34; /usr/lib/python3.6/site-packages/convert2rhel/main.py sed -i \u0026#39;s/json-c.x86_64/json-c.aarch64/g\u0026#39; /usr/lib/python3.6/site-packages/convert2rhel/subscription.py x86 上 convert2rhel 会搞定证书， 但是因为是树莓派，我们要自己搞。\n红帽产品证书\n在 Choose your product 中选择 Red Hat Enterprise Linux, 找到 Red Hat Enterprise Linux for ARM 64, 选好版本和架构并下载，把证书传到树莓上运行。\n1 2 3 # cp /path/to/cert/script /tmp/Red_Hat_Product_Certificate.sh chmod +x /tmp/Red_Hat_Product_Certificate.sh bash /tmp/Red_Hat_Product_Certificate.sh 手动运行 convert2rhel 不能直接运行 convert2rhel ， 因为它写的时候也没想到会有人在树莓派上跑。\n1 source /etc/os-release \u0026amp;\u0026amp; python3 -c \u0026#34;from convert2rhel import main, subscription, systeminfo; main.initialize_logger(\u0026#39;convert2rhel.log\u0026#39;, \u0026#39;/var/log/convert2rhel\u0026#39;); systeminfo.RELEASE_VER_MAPPING[\u0026#39;$VERSION\u0026#39;] = \u0026#39;$VERSION\u0026#39;; systeminfo.system_info.resolve_system_info(); subscription.download_rhsm_pkgs()\u0026#34; 成功了大概会是这样：\n然后安装刚刚下载的软件包：\n1 2 cd /usr/share/convert2rhel/subscription-manager dnf install -y $(ls | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) 绑定订阅 1 subscription-manager register 替换 repo 先鸟尽弓藏兔死狗烹。\n1 2 3 mv /etc/yum.repos.d/convert2rhel.repo /etc/yum.repos.d/convert2rhel.repo.bak mv /etc/yum.repos.d/oracle-linux-ol8.repo /etc/yum.repos.d/oracle-linux-ol8.repo.bak dnf clean all 删除不需要的软件包 1 2 3 4 dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm subscription-manager repos --enable \u0026#34;codeready-builder-for-rhel-8-$(arch)-rpms\u0026#34; dnf remove convert2rhel -y dnf remove oraclelinux-release oraclelinux-release-el8 || rpm -e --nodeps oraclelinux-release oraclelinux-release-el8 ###重新安装本地安装的软件包\n1 2 3 4 cd /usr/share/convert2rhel/subscription-manager dnf reinstall -y $(ls | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39; | sed \u0026#39;s/.rpm//g\u0026#39;) cd ~ rm -rvf /usr/share/convert2rhel 替换非 RHEL 软件包 1 dnf install -y redhat-lsb 1 2 3 4 5 6 dnf reinstall setup dnf distro-sync dnf update -y dnf reinstall $(dnf list --installed | grep ol8 | awk \u0026#39;{print $1}\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) dnf reinstall $(dnf list --installed | grep anaconda | awk \u0026#39;{print $1}\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) dnf reinstall $(dnf list --installed | grep commandline | awk \u0026#39;{print $1}\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39;) 结论 家人们看看 neofetch 吧\n后记 RHEL 9 出了，但是懒得折腾了，教程写了开摆。\n不会真的有人会有和我一样的脑洞吧？？？\n以及这篇尽量口语化了，如果你英语很彳亍，真想搞还是建议看看上面的英文链接。 虽然我英语是工地水平，但是大概还是比看这篇好理解一点。\n","date":"2022-07-10T04:00:00+08:00","image":"https://blog.kmtea.eu/p/220710-pi-rhel/img/cover_hufd19ec95588be1982487783a3a109fc2_244566_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/220710-pi-rhel/","title":"树莓派安装 RHEL"},{"content":"Nexmo 虚拟手机号浅探 最低成本：6.5元\n前情提要 5月，我的 Telegram 被误封了。众所周知，Telegram 和微信一样不存在客服，因此我只能重新注册一个账号。\n想起来18年似乎注册过一个叫 Nexmo 的虚拟号码平台，还充值了10欧元， 但当时因为需要编程才能使用，就放置了。\n这次重新登录，发现已经可以不用写代码，于是欣然注册，分享如下。\n0. 准备工作 注册及充值略（因为是四年前 😩\nsign up\n支持 支付宝 / 微信 / 银联 Nexmo 最低充值金额为 10 欧元，建议拼车 1. 选用号码 注册完毕并充值后，进入 主页\n点击左侧 构建和管理 - 号码 - 购买号码\n选择 国家/地区 为 United States (+1)， 功能 为 SMS， 类型为 Any\n下方的 Number 如果有想要的数字可以填写， 临时号码留空即可\n选择一个你喜欢的号码，点击 购买\n你应该能在 构建和管理 - 号码 - 您的号码 看见刚刚购买的号码\n2. 注册 Google Voice 打开 Google Voice ， 进入 设置 ， 点击 New linked number 按钮\n填入刚才购买的号码，点击 Send code\n回到 日志 - 短信日志\n更改 指示 为 入站，点击 搜索\n再把验证码填入 Google Voice，完成验证\n后记 正如前文所述， Nexmo 的正规用法是编程和使用 API， 因此如果有能力，可以搭建 Webhook， 甚至可以实现转发到 Telegram 的效果\nDiscussion 「全网最低成本」指每个虚拟手机号每月租用成本为 0.9 欧元，约合人民币 6.5 元 作者申明没有收到任何资助，且无利益相关（废话） ","date":"2022-06-23T18:00:00+08:00","image":"https://blog.kmtea.eu/p/220623-nexmo/img/cover_hu1909dc64cd92534807d78c77c6d83ac0_26745_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/220623-nexmo/","title":"Nexmo 虚拟手机号浅探"},{"content":"Wallpaper Engine 刷时长 我一直是个游戏时长爱好者，喜欢看自己主页上游戏时间一点点多起来（哪怕没有真的在玩）。\n以前用过 ArchiSteamFarm 来挂游戏，但是因为它会强制加群就弃用了。\n于是带着这个需求我去 Steam 社区提问了下：\n提问前遵循了 issue 的基本规则（先搜索提问列表以及查阅文档那些）。\n开发者一开始说对不起做不到，但是很快就修改了：\n我把参数加粗放在这里：\n-steamtrackhours 原帖链接：社区帖子\n","date":"2022-06-16T20:00:00+08:00","image":"https://blog.kmtea.eu/p/220616-we-in-game/img/cover_hu08c0f3083afe431d658f35104214c9ea_90008_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.kmtea.eu/p/220616-we-in-game/","title":"Wallpaper Engine 刷时长"},{"content":"Hello World This is my first post!\n","date":"2022-05-31T01:21:50+08:00","permalink":"https://blog.kmtea.eu/p/220531-hello-world/","title":"Hello World"}]